#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(in-package :cl-user)

(ql:quickload '(:cl-fad :alexandria :closer-mop :cl-ppcre :docparser :codex) :silent t)

(defpackage gendoc
  (:use :cl))
(in-package :gendoc)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Globals

(defvar *description-dir* "descriptions")
(defvar *example-dir* "examples")
(defvar *image-dir* "images")
(defvar *scr* "manual.scr")
(defvar *doc-dir* "docs")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Path

(defun doc-dirotcory (package)
  (let ((source-directory (asdf:system-source-directory package)))
    (fad:pathname-as-directory (merge-pathnames *doc-dir* source-directory))))

(defun manifest-path (package)
  (merge-pathnames "manifest.lisp" (doc-dirotcory package)))

(defun scr-path (package)
  (merge-pathnames *scr* (doc-dirotcory package)))

(defun get-relative-path (from to)
  (let ((dir1 (pathname-directory from))
        (dir2 (pathname-directory to))
        (result))
    (assert (and (eql (car dir1) :absolute)
                 (eql (car dir2) :absolute)))
    (setq dir1 (cdr dir1)
          dir2 (cdr dir2))
    (loop for name1 in dir1
          for name2 in dir2
          when (equal name1 name2)
            do (setq dir1 (remove name1 dir1 :test #'equal)
                     dir2 (remove name2 dir2 :test #'equal)))
    (dolist (_ dir1)
      (declare (ignore _))
      (push :up result))
    (dolist (name dir2)
      (push name result))
    (make-pathname
     :name (pathname-name to)
     :type (pathname-type to)
     :directory `(:relative ,@(nreverse result)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SCR

(defun key->type (key)
  (case key
    (:generic-function :generic)
    (otherwise key)))

(defun symbol-types-with-docstring (symbol index)
  (let ((nodes (docparser:query index :symbol-name (symbol-name symbol))))
    (loop for node across nodes
          when (docparser:node-docstring node)
            collecting (ppcre:register-groups-bind (name) ("(.+)-NODE" (princ-to-string (type-of node)))
                         (when name (key->type (intern name :keyword)))))))

(defun symbol-sort (list)
  (sort list
        #'(lambda (a b)
            (apply #'string< (mapcar #'symbol-name (list a b))))))

(defun external-symbols-with-docstring (package)
  (let ((hash (make-hash-table))
        (index (docparser:parse package)))
    (do-external-symbols (symbol package)
      (let ((types (symbol-types-with-docstring symbol index)))
        (dolist (type types)
          (push symbol (gethash type hash)))))
    (maphash #'(lambda (key value)
                 (setf (gethash key hash)
                       (symbol-sort value)))
             hash)
    hash))

(defmacro with-section ((title) &body body)
  `(progn
     (format t "~&@begin(section)~%@title(~a)~%" ,title)
     ,@body
     (format t "~&@end(section)~%")))

(defmacro with-package ((package) &body body)
  `(progn
     (format t
             "~&@cl:with-package[name=\"~(~a~)\"](~%"
             (etypecase ,package
               (package (package-name ,package))
               (symbol ,package)
               (string ,package)))
     ,@body
     (format t "~&)~%")))

(defun type->title (type)
  (ecase type
    (:variable "Globals")
    (:function "Functions")
    (:generic "Gereric Functions")
    (:macro "Macros")
    (:type "Types")
    (:struct "Structures")
    (:class "Classes")
    (:condition "Conditions")))

(defun pretty-name (name)
  (multiple-value-bind (pretty num)
      (ppcre:register-groups-bind ((#'parse-integer num) rest) ("^(\\\d+)\\\.(.+)" name)
        (values (format nil "~a. ~a" num rest) num))
    (if (and pretty num)
        (values pretty num)
        name)))

(defun pretty-author-name (name)
  (substitute #\- #\Space name))

(defun pretty-pathname-sort (list)
  (sort list (lambda (path1 path2)
               (multiple-value-bind (pretty1 num1) (pretty-name (pathname-name path1))
                 (multiple-value-bind (pretty2 num2) (pretty-name (pathname-name path2))
                   (cond
                     ((and num1 num2)
                      (< num1 num2))
                     (num1 t)
                     (num2 nil)
                     (t (string< pretty1 pretty2))))))))

(defun print-symbol-scr (package)
  (let* ((system (asdf:find-system package))
         (source-directory (asdf:system-source-directory system))
         (author (pretty-author-name (asdf:system-author system)))
         (travis-p (probe-file (merge-pathnames ".travis.yml" source-directory)))
         (circle-p (probe-file (merge-pathnames "circle.yml" source-directory)))
         (descriptions (pretty-pathname-sort (fad:list-directory (merge-pathnames *description-dir* source-directory))))
         (examples (pretty-pathname-sort (fad:list-directory (merge-pathnames *example-dir* source-directory))))
         (images (pretty-pathname-sort (fad:list-directory (merge-pathnames *image-dir* source-directory))))
         (scr-path (scr-path package)))
    (with-section ("Overview")
      (when travis-p
        (let ((travis-url (format nil "https://travis-ci.org/~a/~(~a~)" author package)))
          (format t "~&@link[uri=~a](@image[src=\"~a.svg\"]())~%~%" travis-url travis-url)))
      (when circle-p
        (let ((circle-url (format nil "https://circleci.com/gh/~a/~(~a~)" author package)))
          (format t "~&@link[uri=~a](@image[src=\"~a.svg\"]())~%~%" circle-url circle-url)))
      (let ((coveralls-url (format nil "https://coveralls.io/repos/~a/~(~a~)" author package)))
          (format t "~&@link[uri=~a](@image[src=\"~a/badge.svg\"]())~%" coveralls-url coveralls-url))
      (with-section ("Description")
        (princ (asdf:system-description system))
        (dolist (description descriptions)
          (with-section ((pretty-name (pathname-name description)))
            (let ((string (alexandria:read-file-into-string description)))
              (princ (ppcre:regex-replace-all "\\\n" string (format nil "~%~%")))))))
      (when images
        (with-section ("Images")
          (dolist (image images)
            (unless (string-equal (pathname-type image) "lisp")
              (with-section ((pretty-name (pathname-name image)))
                (uiop:copy-file image (make-pathname :name (pathname-name image)
                                                     :type (pathname-type image)
                                                     :defaults (fad:pathname-directory-pathname scr-path)))
                (format t "~&@image[src=\"~a.~a\"]()~%" (pathname-name image) (pathname-type image))
                (let ((found (find (pathname-name image) images
                                   :test #'(lambda (name pathname)
                                             (and (string-equal name (pathname-name pathname))
                                                  (string-equal (pathname-type pathname) "lisp"))))))
                  (when found
                    (format t "~&@code[lang=lisp](@include[path=~a]())~%" (get-relative-path scr-path found)))))))))
      (when examples
        (with-section ("Examples")
          (dolist (example examples)
            (with-section ((pretty-name (pathname-name example)))
              (format t "~&@code[lang=lisp](@include[path=~a]())~%" (get-relative-path scr-path example))))))
      (alexandria:when-let ((homepage (asdf:system-homepage system)))
        (with-section ("Source")
          (format t "~&@link[uri=~a](~a)~%" homepage package)))
      (with-section ("Author")
        (format t "~&@b(~a)~%"(asdf:system-author system)))
      (with-section ("Licence")
        (princ (asdf:system-licence system))))
    (let ((hash (external-symbols-with-docstring package)))
      (dolist (key (list :variable :function :generic :macro :type :struct :class :condition))
        (let ((symbols (gethash key hash)))
          (when symbols
            (with-section ((type->title key))
              (loop for symbol in symbols
                    do (with-package ((symbol-package symbol))
                         (format t "~&@cl:doc(~(~a~) ~(~a~))~%" key symbol))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Manifest

(defun print-manifest (package)
  (let ((system (asdf:find-system package)))
    (format t
            "~&(:docstring-markup-format :scriba
 :systems (:~(~a~))
 :documents ((:title \"~a\"
              :authors (\"~a\")
              :output-format (:type :multi-html
                              :template :minima)
              :sources (\"~a\"))))~%"
            package
            package
            (asdf:system-author system)
            *scr*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Main

(defun main (package &rest argv)
  (declare (ignorable argv))
  (let* ((package (intern (string-upcase package) :keyword))
         (doc-dirotcory (doc-dirotcory package))
         (manifest-path (manifest-path package))
         (scr-path (scr-path package)))
    (ql:quickload package :silent t)
    (ensure-directories-exist doc-dirotcory)
    (format t "~&Diretcory: ~a~%" doc-dirotcory)

    (with-open-file (*standard-output* manifest-path
                                       :direction :output
                                       :if-exists :supersede
                                       :external-format :utf8)
      (print-manifest package))
    (format t "~&Manifest:  ~a~%" manifest-path)

    (with-open-file (*standard-output* scr-path
                                       :direction :output
                                       :if-exists :supersede
                                       :external-format :utf8)
      (print-symbol-scr package))
    (format t "~&SCR:       ~a~%" scr-path)
    (let ((*standard-output* (make-broadcast-stream))
          (*error-output* (make-broadcast-stream)))
      (codex:document package))
    (format t "~&Build:     ~adocs/build/~%" (asdf:system-source-directory package))))
