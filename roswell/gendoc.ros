#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(in-package :cl-user)

(ql:quickload '(:cl-fad :alexandria :closer-mop :cl-ppcre :docparser :codex) :silent t)

(defpackage gendoc
  (:use :cl))
(in-package :gendoc)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Globals

(defvar *example-dir* "examples")
(defvar *scr* "manual.scr")
(defvar *doc-dir* "docs")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Path

(defun doc-dirotcory (package)
  (let ((source-directory (asdf:system-source-directory package)))
    (fad:pathname-as-directory (merge-pathnames *doc-dir* source-directory))))

(defun manifest-path (package)
  (merge-pathnames "manifest.lisp" (doc-dirotcory package)))

(defun scr-path (package)
  (merge-pathnames *scr* (doc-dirotcory package)))

(defun get-relative-path (from to)
  (let ((dir1 (pathname-directory from))
        (dir2 (pathname-directory to))
        (result))
    (assert (and (eql (car dir1) :absolute)
                 (eql (car dir2) :absolute)))
    (setq dir1 (cdr dir1)
          dir2 (cdr dir2))
    (loop for name1 in dir1
          for name2 in dir2
          when (equal name1 name2)
            do (setq dir1 (remove name1 dir1 :test #'equal)
                     dir2 (remove name2 dir2 :test #'equal)))
    (dolist (_ dir1)
      (declare (ignore _))
      (push :up result))
    (dolist (name dir2)
      (push name result))
    (make-pathname
     :name (pathname-name to)
     :type (pathname-type to)
     :directory `(:relative ,@(nreverse result)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SCR

(defun key->type (key)
  (case key
    (:generic-function :generic)
    (otherwise key)))

(defun symbol-types-with-docstring (symbol index)
  (let ((nodes (docparser:query index :symbol-name (symbol-name symbol))))
    (loop for node across nodes
          when (docparser:node-docstring node)
            collecting (ppcre:register-groups-bind (name) ("(.+)-NODE" (princ-to-string (type-of node)))
                         (when name (key->type (intern name :keyword)))))))

(defun symbol-sort (list)
  (sort list
        #'(lambda (a b)
            (apply #'string< (mapcar #'symbol-name (list a b))))))

(defun external-symbols-with-docstring (package)
  (let ((hash (make-hash-table))
        (index (docparser:parse package)))
    (do-external-symbols (symbol package)
      (let ((types (symbol-types-with-docstring symbol index)))
        (dolist (type types)
          (push symbol (gethash type hash)))))
    (maphash #'(lambda (key value)
                 (setf (gethash key hash)
                       (symbol-sort value)))
             hash)
    hash))

(defmacro with-section ((title) &body body)
  `(progn
     (format t "~&@begin(section)~%@title(~a)~%" ,title)
     ,@body
     (format t "~&@end(section)~%")))

(defmacro with-package ((package) &body body)
  `(progn
     (format t "~&@cl:with-package[name=\"~(~a~)\"](~%" (etypecase ,package
                                                          (package (package-name ,package))
                                                          (symbol ,package)
                                                          (string ,package)))
     ,@body
     (format t "~&)~%")))

(defun type->title (type)
  (ecase type
    (:variable "Globals")
    (:function "Functions")
    (:generic "Gereric Functions")
    (:macro "Macros")
    (:type "Types")
    (:struct "Structures")
    (:class "Classes")
    (:condition "Conditions")))

(defun print-symbol-scr (package)
  (let* ((system (asdf:find-system package))
         (examples (fad:list-directory (merge-pathnames *example-dir* (asdf:system-source-directory system))))
         (scr-path (scr-path package)))
    (with-section ("Overview")
      (with-section ("Description")
        (princ (asdf:system-description system)))
      (when examples
        (with-section ("Examples")
          (dolist (example examples)
            (let ((name (pathname-name example)))
              (ppcre:register-groups-bind ((#'parse-integer num) rest) ("(\\\d+)\\\.(.+)" name)
                (with-section ((if (and num rest)
                                   (format nil "~a. ~a" num rest)
                                   name))
                  (format t "~&@code[lang=lisp](@include[path=~a]())~%" (get-relative-path scr-path example))))))))
      (alexandria:when-let ((homepage (asdf:system-homepage system)))
        (with-section ("Source")
          (format t "~&@link[uri=~a](~a)~%" homepage package)))
      (with-section ("Author")
        (format t "~&@b(~a)~%"(asdf:system-author system)))
      (with-section ("Licence")
        (princ (asdf:system-licence system))))
    (let ((hash (external-symbols-with-docstring package)))
      (dolist (key (list :variable :function :generic :macro :type :struct :class :condition))
        (let ((symbols (gethash key hash)))
          (when symbols
            (with-section ((type->title key))
              (loop for symbol in symbols
                    do (with-package ((symbol-package symbol))
                         (format t "~&@cl:doc(~(~a~) ~(~a~))~%" key symbol))))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Manifest

(defun print-manifest (package)
  (let ((system (asdf:find-system package)))
    (format t
            "~&(:docstring-markup-format :scriba
 :systems (:~(~a~))
 :documents ((:title \"~a\"
              :authors (\"~a\")
              :output-format (:type :multi-html
                              :template :minima)
              :sources (\"~a\"))))~%"
            package
            package
            (asdf:system-author system)
            *scr*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Main

(defun main (package &rest argv)
  (declare (ignorable argv))
  (let* ((package (intern (string-upcase package) :keyword))
         (doc-dirotcory (doc-dirotcory package))
         (manifest-path (manifest-path package))
         (scr-path (scr-path package)))
    (ql:quickload package :silent t)
    (ensure-directories-exist doc-dirotcory)
    (format t "~&Diretcory: ~a~%" doc-dirotcory)

    (with-open-file (*standard-output* manifest-path
                                       :direction :output
                                       :if-exists :supersede
                                       :external-format :utf8)
      (print-manifest package))
    (format t "~&Manifest:  ~a~%" manifest-path)

    (with-open-file (*standard-output* scr-path
                                       :direction :output
                                       :if-exists :supersede
                                       :external-format :utf8)
      (print-symbol-scr package))
    (format t "~&SCR:       ~a~%" scr-path)
    (let ((*standard-output* (make-broadcast-stream))
          (*error-output* (make-broadcast-stream)))
      (codex:document package))
    (format t "~&Build:     ~adocs/build/~%" (asdf:system-source-directory package))))
